#!/bin/sh -ex
# Script that invokes ocamlbuild commands for various targets

# source the package variables
if [ -e "_vars" ]; then
  . _vars
fi

OCAMLBUILD=${ocamlbuild:-OCAMLBUILD}
OCAMLBUILD_FLAGS=-classic-display

# create entries in the _config/ directory 
function configure {
  # initialise _config directory
  rm -rf _config
  mkdir -p _config
  # _config/inc has -I flags
  ocamlfind query -r -i-format ${DEPS} > _config/flags.ocaml
  # _config/archives.* contains dependency archives for linking tests
  ocamlfind query -r -a-format -predicates native ${DEPS} > _config/archives.native
  ocamlfind query -r -a-format -predicates byte ${DEPS} > _config/archives.byte
  # _config/built.runtime contains the archive files
  echo ${RUNTIME} > _config/clibs
  # _config/pp has camlp4 flags for the library and binaries
  ocamlfind query -r -predicates syntax,preprocessor -format '-I %d %A' ${DEPS} > _config/syntax.deps
  # _config/syntax has flags to build p4 extensions in syntax/
  ocamlfind query -r -predicates syntax,preprocessor -format '-I %d %A' camlp4.quotations.o camlp4.lib camlp4.extend > _config/syntax.build
  echo ${SYNTAX} > _config/syntax
  echo ${LIB} > _config/lib
  # TODO check ocamlopt is installed
  touch _config/flag.opt
  # TODO getopt parsing for this and implement various options
  touch _config/flag.natdynlink
}

# invoke native code and byte code compiler targets
function compile {
  # build bytecode files and C bindings always
  ${OCAMLBUILD} ${OCAMLBUILD_FLAGS} ${NAME}.all
}

# generate META file and invoke ocamlfind installation
function install {
  sed -e "s/@VERSION@/${VERSION}/g" < META.in > _config/META
  ocamlfind remove ${NAME} || true
  # TODO DESTDIR and OCAMLFIND_FLAGS from environment
  t=`sed -e 's,^,_build/,g' < _build/${NAME}.all`
  ocamlfind install ${NAME} _config/META ${t}
}

# tests also include the built syntax extensions (if any)
function run_tests {
  for test in ${TESTS}; do
    t="lib_test/$test.byte"
    [ -e _config/flag.opt ] && t="${t} lib_test/$test.native"
    ${OCAMLBUILD} ${OCAMLBUILD_FLAGS} ${t}
  done
}

function clean {
  ${OCAMLBUILD} -clean
  rm -rf _config
}

cmd=$1
shift

case "$cmd" in
conf*) configure ;;
compile|build) compile ;;
install) install ;;
clean) clean ;;
doc) doc ;;
test) run_tests ;;
*) echo unknown command: $cmd; exit 1 ;;
esac
